{"version":3,"sources":["src/index.ts","src/example.tsx"],"names":[],"mappings":"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","file":"example.118d2ac8.js","sourceRoot":"..","sourcesContent":["export const keys = <T extends AnyObject>(o: T) => Object.keys(o) as any as Array<keyof T>\n\ntype CTextTag = string | number\ntype CProps<T extends AnyObject = AnyObject> = { children: Array<CElement> } & T\ntype CTextElement<T extends CTextTag> = { type: string; props: CProps<{ nodeValue: T }> }\ntype CElement<T extends AnyObject = AnyObject> = { type: string; props: CProps<T> } | CTextElement<CTextTag>\ntype NFiber = Fiber | null\ntype Key = string | number\n\nexport type Fiber<T extends AnyObject = AnyObject> = {\n\tprops: CProps<T>\n\ttype: string\n\tdom: HTMLElement | Text | null\n\tparent: NFiber\n\tchild: NFiber\n\tsibling: NFiber\n\talternate?: NFiber\n\teffectTag?: \"Update\" | \"Add\" | \"Remove\"\n}\n\nconst createElement = <T extends AnyObject>(\n\ttype: string,\n\tprops: T = {} as any,\n\t...children: Array<CElement | CTextTag>\n): CElement<T> => ({\n\ttype,\n\tprops: {\n\t\t...props,\n\t\tchildren: children.map(child => (typeof child === \"object\" ? child : createTextElement(child)))\n\t}\n})\n\nconst TEXT_ELEMENT = \"TEXT_ELEMENT\"\nconst createTextElement = <T extends CTextTag>(text: T): CTextElement<T> => ({\n\ttype: TEXT_ELEMENT,\n\tprops: { nodeValue: text, children: [] }\n})\n\nconst createDom = <T extends Pick<Fiber, \"type\" | \"props\">>({ type, props }: T) => {\n\tconst dom = type === TEXT_ELEMENT ? document.createTextNode(\"\") : document.createElement(type)\n\tupdateDom(dom, { children: [] }, props)\n\treturn dom\n}\n\nconst isEvent = (key: Key) => key.toString().startsWith(\"on\")\nconst isProp = (key: Key) => key !== \"children\" && !isEvent(key)\nconst isAdded = (prev: AnyObject, current: AnyObject) => (key: Key) => prev[key] !== current[key]\nconst isRemoved = (current: AnyObject) => (key: Key) => !(key in current)\nconst toEventType = (name: Key) => name.toString().toLowerCase().substring(2)\n\nconst getPropertiesDiff = (prev: AnyObject, current: AnyObject) => ({\n\tlisteners: {\n\t\tremoved: keys(prev)\n\t\t\t.filter(isEvent)\n\t\t\t.filter(key => !(key in current) || isAdded(prev, current)(key)),\n\t\tadded: keys(current).filter(isEvent).filter(isAdded(prev, current))\n\t},\n\tprops: {\n\t\tremoved: keys(prev).filter(isProp).filter(isRemoved(current)),\n\t\tadded: keys(current).filter(isProp).filter(isAdded(prev, current))\n\t}\n})\n\nconst updateDom = (dom: Fiber[\"dom\"], prev: AnyObject, current: AnyObject) => {\n\tif (!dom) return\n\tconst { listeners, props } = getPropertiesDiff(prev, current)\n\tlisteners.removed.forEach(n => dom.removeEventListener(toEventType(n), prev[n] as EventListener))\n\tlisteners.added.forEach(n => dom.addEventListener(toEventType(n), current[n] as EventListener))\n\tprops.removed.filter(n => n in dom).forEach(n => delete (dom as any)[n])\n\tprops.added.forEach(name => ((dom as any)[name] = current[name]))\n}\n\nconst mkFiber = ({ type, props }: CElement, delta: Partial<Fiber> = {}): Fiber => ({\n\ttype,\n\tprops,\n\talternate: null,\n\tparent: null,\n\tdom: null,\n\tchild: null,\n\tsibling: null,\n\t...delta\n})\n\nlet currentRootFiber: NFiber = null\nlet rootFiber: NFiber = null\nlet nextFiber: NFiber = null\n\n// for testing purposes\nlet _requestIdleCallback: typeof requestIdleCallback\nconst init = (requestIdleCb?: typeof requestIdleCallback) => {\n\t_requestIdleCallback = requestIdleCb || requestIdleCallback\n\t_requestIdleCallback(workLoop)\n}\n\nconst buildFibers = (fiber: NFiber, t: IdleDeadline) => {\n\twhile (fiber) {\n\t\tif (t.timeRemaining() < 1) return fiber\n\t\tfiber = buildFiber(fiber)\n\t}\n\treturn null\n}\n\nconst workLoop = (deadline: IdleDeadline) => {\n\tnextFiber = buildFibers(nextFiber, deadline)\n\tif (!nextFiber && rootFiber) {\n\t\tunmountedFibers.forEach(commit)\n\t\tcommit(rootFiber.child)\n\t\tcurrentRootFiber = rootFiber\n\t\trootFiber = null\n\t}\n\t_requestIdleCallback(workLoop)\n}\n\nconst buildFiber = (fiber: NFiber): NFiber => {\n\tif (!fiber) return null\n\tif (!fiber.dom) fiber.dom = createDom(fiber)\n\n\treconcileChildren(fiber)\n\n\tif (fiber.child) return fiber.child\n\tfor (; fiber; fiber = fiber.parent) if (fiber.sibling) return fiber.sibling\n\treturn null\n}\n\nlet unmountedFibers: Fiber[] = []\n\nconst reconcileChildren = (fiber: Fiber) => {\n\tlet prev: NFiber = null\n\tlet oldFiber = fiber.alternate && fiber.alternate.child\n\tconst { children } = fiber.props\n\t// TODO: use key property for arrays\n\tfor (let index = 0; index < children.length || oldFiber !== null; index++) {\n\t\tconst el = children[index]\n\t\tlet child: NFiber = null\n\t\tconst sameType = oldFiber && el && el.type === oldFiber.type\n\t\tif (sameType)\n\t\t\tchild = mkFiber(el, { dom: oldFiber?.dom, parent: fiber, alternate: oldFiber, effectTag: \"Update\" })\n\n\t\tif (!sameType && el) child = mkFiber(el, { dom: null, parent: fiber, alternate: null, effectTag: \"Add\" })\n\t\tif (!sameType && oldFiber) {\n\t\t\toldFiber.effectTag = \"Remove\"\n\t\t\tunmountedFibers.push(oldFiber)\n\t\t}\n\t\tif (oldFiber) oldFiber = oldFiber.sibling\n\t\tif (!prev) fiber.child = child\n\t\telse prev.sibling = child\n\t\tprev = child\n\t}\n}\n\nconst render = (element: CElement, dom: HTMLElement) => {\n\tif (!_requestIdleCallback) init()\n\trootFiber = mkFiber({ type: \"ROOT\", props: { children: [element] } }, { dom, alternate: currentRootFiber })\n\tunmountedFibers = []\n\tnextFiber = rootFiber\n}\n\nconst commit = (fiber: NFiber) => {\n\tif (!fiber) return\n\n\tconst { parent, child, sibling } = fiber\n\tif (parent && parent.dom && fiber.dom)\n\t\tswitch (fiber.effectTag) {\n\t\t\tcase \"Add\":\n\t\t\t\tparent.dom.appendChild(fiber.dom)\n\t\t\t\tbreak\n\t\t\tcase \"Remove\":\n\t\t\t\tparent.dom.removeChild(fiber.dom)\n\t\t\t\tbreak\n\t\t\tcase \"Update\":\n\t\t\t\tupdateDom(fiber.dom as any, fiber.alternate?.props || { children: [] }, fiber.props)\n\t\t\t\tbreak\n\t\t}\n\n\tcommit(child)\n\tcommit(sibling)\n}\n\nexport const CReactInternal = { mkFiber, buildFibers, buildFiber, reconcileChildren, updateDom, getPropertiesDiff }\nexport const CReact = { createElement, render }\n","/** @jsx CReact.createElement */\nimport { CReact } from \".\"\n\nconst render = (value: string) => {\n\tCReact.render(\n\t\t<div style=\"color: white; padding: 1em; font-size: 2em\">\n\t\t\t<input autofocus=\"true\" onInput={(e: any) => render(e.target.value)} value={value} />\n\t\t\t<h1>This page was generated using own-react {value}</h1>\n\t\t\t<img src=\"screenshot.png\" />\n\t\t</div>,\n\t\tdocument.getElementById(\"root\") as HTMLElement\n\t)\n}\nrender(\"type something\")\n"]}